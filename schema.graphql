scalar JSON
scalar DateTime
scalar Upload
scalar ID
scalar URL

type Query {
    hello_image_splitter: String
	file(id:ID!): File
	hiveFiles(hiveId:ID!): [FrameSideFile]
	getExistingHiveAdvice(hiveID: ID): String
	hiveFrameSideFile(frameSideId:ID!): FrameSideFile
	hiveFrameSideCells(frameSideId:ID!): FrameSideCells

	""" Gets single inspection states of frame sides (frameSideIds are optional, for extra filtering) """
	frameSidesInspections(frameSideIds: [ID], inspectionId:ID!): [FrameSideInspection]
}

type Mutation {
	generateHiveAdvice(hiveID: ID, adviceContext: JSON, langCode: String): String
	uploadFrameSide(file: Upload!): File
	addFileToFrameSide(frameSideId: ID!, fileId: ID!, hiveId: ID!): Boolean
	filesStrokeEditMutation(files: [FilesUpdateInput]): Boolean

	updateFrameSideCells(cells: FrameSideCellsInput!): Boolean!
	confirmFrameSideQueen(frameSideId: ID!, isConfirmed: Boolean!): Boolean! # Changed return type to Boolean!

	"""
	On inspection creation, we want to clone frames from current state (NULL references) and set inspectionId
	Then create new set of frames with NULL frames
	"""
	cloneFramesForInspection(frameSideIDs: [ID], inspectionId: ID!): Boolean!
}

""" When user draws on top of a frame photo, we want to store stroke history """
input FilesUpdateInput{
	frameSideId: ID!
	fileId: ID!
	strokeHistory: JSON!
}

""" FrameSideFile is an intermediate (join) entity that connects FrameSide with File """
type FrameSideFile {
	file: File!
	frameSideId: ID
	hiveId: ID
	strokeHistory: JSON

	""" regions of detected bees """
	detectedBees: JSON
	detectedQueenCount: Int
	detectedWorkerBeeCount: Int
	detectedDroneCount: Int

	isBeeDetectionComplete: Boolean

	""" regions of detected cells """
	detectedCells: JSON
	isCellsDetectionComplete: Boolean

	""" regions of detected queen cups """
	detectedQueenCups: JSON
	isQueenCupsDetectionComplete: Boolean
	isQueenDetectionComplete: Boolean

	queenDetected: Boolean!

	workerCount: Int
	droneCount: Int

	detectedVarroa: JSON
	varroaCount: Int
}

""" File is an abstraction of an uploaded photo of a frame.But we don't want to mix it with various properties in case we will have more uploads.for other purposes than for a frame. For example, hive bottom or hive entrance. """
type File{
	id: ID!
	url: URL!
	resizes: [FileResize]
}

type FileResize {
	id: ID!
	file_id: ID!
	max_dimension_px: Int!
	url: URL!
}

# Frame cells is a statistic information of FrameSide composition
type FrameSideCells @key(fields: "id"){
	id: ID!
	
	broodPercent: Int
	cappedBroodPercent: Int
	eggsPercent: Int
	pollenPercent: Int
	honeyPercent: Int
}

""" FrameSideCellsInput is used to update percentage composition of a FrameSide.This is useful if automatic detection was not correct and user wants to adjust percentages """
input FrameSideCellsInput{
	id: ID!
	
	broodPercent: Int
	cappedBroodPercent: Int
	eggsPercent: Int
	pollenPercent: Int
	honeyPercent: Int
}

type FrameSideInspection {
	frameSideId: ID!
	inspectionId: ID!
	file: File
	cells: FrameSideCells
	frameSideFile: FrameSideFile
}

extend type FrameSide @key(fields: "id") {
	id: ID @external
	isQueenConfirmed: Boolean # Added field
	file: File
	cells: FrameSideCells
	frameSideFile: FrameSideFile
	inspections: [FrameSideInspection]
}

extend type Hive @key(fields: "id") {
	id: ID! @external

	"""amount of bees detected on all frames. Includes all types (workers, drones, queens)"""
	beeCount: Int
	files: [FrameSideFile]
}
