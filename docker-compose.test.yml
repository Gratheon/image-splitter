services:
  image-splitter:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - ENV_ID=testing
      - NODE_OPTIONS=--max-old-space-size=4096
    tty: true
    ports:
      - 8800:8800
    # mount folders to keep hot reload
    # while having node_modules installed in the container as it has linux dependencies
    volumes:
      - ./config:/app/config
      - ./migrations:/app/migrations
      - ./schema.graphql:/app/schema.graphql
      - ./src:/app/src
      - ./tmp:/app/tmp
    restart: always
    depends_on:
      mysql-test: # Wait for mysql-test to be healthy
        condition: service_healthy
      minio: # Wait for minio to be healthy
        condition: service_healthy
      create-bucket: # Wait for the bucket creation task to complete
        condition: service_completed_successfully

  mysql-test:
    image: mysql:8.2
    command: mysqld --default-authentication-plugin=mysql_native_password --skip-mysqlx --sort_buffer_size=512K
    environment:
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_ROOT_PASSWORD: test
      MYSQL_DATABASE: image-splitter # Let entrypoint handle only this one
    mem_limit: 1G
    ports:
      - 5101:3306
    volumes:
      - ./test/mysql82:/var/lib/mysql
      - ./test/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql # Mount init script
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s # Give it some time to start before checking

  minio:
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minio-admin
      MINIO_ROOT_PASSWORD: minio-admin
    command: server /data --console-address :9001
    volumes:
      - ./test/minio:/data
    healthcheck:
      # Use curl to check the Minio health endpoint directly
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  create-bucket:
    image: minio/mc:latest
    container_name: create-minio-bucket
    environment:
      MINIO_HOST: minio
      MINIO_ACCESS_KEY: minio-admin
      MINIO_SECRET_KEY: minio-admin
    depends_on: # Make sure minio is healthy before trying to create bucket
      minio:
        condition: service_healthy
    entrypoint: ["sh", "-c"]
    # Add set -e, sleep, set alias, make bucket (without || true)
    command: "set -e && sleep 2 && mc alias set --api S3v4 local http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} && mc mb local/gratheon-test"
volumes:
  mysql82:
